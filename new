import pygame
import sys


def display_score():
    current_time = int(pygame.time.get_ticks() / 1000) - start_time
    score_surface =test_font.render(f'Score:{current_time}',False,(64,64,64))
    score_rect = score_surface.get_rect(center = (400, 50))
    screen.blit(score_surface,score_rect)
    return current_time

def game_over(score):
    player_stand_surface = pygame.image.load('graphics/player/player_stand.png').convert_alpha()
    player_stand_scaled = pygame.transform.scale2x(player_stand_surface)
    player_stand_rect = player_stand_scaled.get_rect(center= (400,200))

    title_text = test_font.render("Snail Run", True, (115,160,186))
    title_text = pygame.transform.scale2x(title_text)
    title_rect =title_text.get_rect(center = (400,75))

    bottom_text = test_font.render("Press Space to continue", True, (115,160,186))
    bottom_rect =bottom_text.get_rect(center = (400,325))

    score_surf = test_font.render(f"Score: {score}", True,(115,160,186))
    score_rect= score_surf.get_rect(center = (400,325))
    
    screen.fill((94,129,162))
    screen.blit(title_text, title_rect)
    if score == 0:
        screen.blit(bottom_text, bottom_rect)
    else:
        screen.blit(score_surf,score_rect)
    screen.blit(player_stand_scaled,player_stand_rect)
    pygame.display.flip()

pygame.init()
#define display surface and screen size
screen = pygame.display.set_mode((800,400))
#set the name of the game
pygame.display.set_caption("Snail Run")
#clock object to keep track of time
clock = pygame.time.Clock()

#intilize variables
test_font = pygame.font.Font('font/Pixeltype.ttf',50)
game_active = True
start_time = 0
text_color = (64,64,64)
player_gravity = 0
score = 0

#create regular surfaces
sky_surface = pygame.image.load('graphics/Sky.png').convert()
ground_surface = pygame.image.load('graphics/ground.png').convert()

snail_surface =pygame.image.load('graphics/snail/snail1.png').convert_alpha()
snail_rect = snail_surface.get_rect(midbottom = (600,300))

player_surface = pygame.image.load('graphics/player/player_walk_1.png').convert_alpha()
player_rect = player_surface.get_rect(midbottom = (80,300))

#ensure games runs forever until we want it to close
while True:
    #event loop
    for event in pygame.event.get():
        #allow user to quit
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit(0)

        if game_active:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if player_rect.collidepoint(event.pos) and player_rect.bottom >= 300:
                    player_gravity =-20
                        
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and player_rect.bottom >= 300:
                    player_gravity =-20
        else:
            if event.type == pygame.KEYDOWN and event.key == K_SPACE:
               game_active = True
               snail_rect.left = 800
               start_time = int(pygame.time.get_ticks() / 1000)
               
    #ACTIVE GAME PART
    if game_active:
        #place regular surface on display surface
        screen.blit(sky_surface,(0,0))
        screen.blit(ground_surface,(0,300))
        #pygame.draw.rect(screen,"#c0e8ec", score_rect)
        #pygame.draw.rect(screen,"#c0e8ec", score_rect, 10)
        #screen.blit(score_surface,score_rect)
        score = display_score()

        #snail moving animation
        snail_rect.right -= 4
        if snail_rect.right < -100: snail_rect.right =800
        screen.blit(snail_surface,snail_rect)
        
        #player
        player_gravity +=1
        player_rect.y += player_gravity
        if player_rect.bottom >= 300: player_rect.bottom = 300
        screen.blit(player_surface,player_rect)
        
        if snail_rect.colliderect(player_rect):
            game_active = False
    #INTRO
    else:
        game_over(score)
        #draw all elements and update everything from set display surface
        pygame.display.update()
        #set clock to frame rate ie 60fps
        clock.tick(60)
